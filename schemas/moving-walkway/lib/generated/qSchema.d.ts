import { QSchema as AirportQSchema } from '@airport/air-control';
import { DbSchema } from '@airport/ground-control';
import { QMissingRecord } from './missingRecord/qmissingrecord';
import { QMissingRecordRepoTransBlock } from './missingRecord/qmissingrecordrepotransblock';
import { QRecordUpdateStage } from './qrecordupdatestage';
import { QRepoTransBlockResponseStage } from './repositoryTransactionBlock/qrepotransblockresponsestage';
import { QRepoTransBlockSchemaToChange } from './repositoryTransactionBlock/qrepotransblockschematochange';
import { QRepositoryTransactionBlock } from './repositoryTransactionBlock/qrepositorytransactionblock';
import { QRepositoryTransactionHistoryUpdateStage } from './repositoryTransactionBlock/qrepositorytransactionhistoryupdatestage';
import { QSharingMessage } from './sharingMessage/qsharingmessage';
import { QSharingMessageRepoTransBlock } from './sharingMessage/qsharingmessagerepotransblock';
import { QSharingNode } from './sharingNode/qsharingnode';
import { QSharingNodeRepoTransBlock } from './sharingNode/qsharingnoderepotransblock';
import { QSharingNodeRepoTransBlockStage } from './sharingNode/qsharingnoderepotransblockstage';
import { QSharingNodeRepository } from './sharingNode/qsharingnoderepository';
import { QSharingNodeTerminal } from './sharingNode/qsharingnodeterminal';
import { QSynchronizationConflict } from './conflict/qsynchronizationconflict';
import { QSynchronizationConflictPendingNotification } from './conflict/qsynchronizationconflictpendingnotification';
import { QSynchronizationConflictValues } from './conflict/qsynchronizationconflictvalues';
import { IBaseMissingRecordDmo, IBaseMissingRecordRepoTransBlockDmo, IBaseRecordUpdateStageDmo, IBaseRepoTransBlockResponseStageDmo, IBaseRepoTransBlockSchemaToChangeDmo, IBaseRepositoryTransactionBlockDmo, IBaseRepositoryTransactionHistoryUpdateStageDmo, IBaseSharingMessageDmo, IBaseSharingMessageRepoTransBlockDmo, IBaseSharingNodeDmo, IBaseSharingNodeRepoTransBlockDmo, IBaseSharingNodeRepoTransBlockStageDmo, IBaseSharingNodeRepositoryDmo, IBaseSharingNodeTerminalDmo, IBaseSynchronizationConflictDmo, IBaseSynchronizationConflictPendingNotificationDmo, IBaseSynchronizationConflictValuesDmo } from './baseDmos';
import { IBaseMissingRecordDao, IBaseMissingRecordRepoTransBlockDao, IBaseRecordUpdateStageDao, IBaseRepoTransBlockResponseStageDao, IBaseRepoTransBlockSchemaToChangeDao, IBaseRepositoryTransactionBlockDao, IBaseRepositoryTransactionHistoryUpdateStageDao, IBaseSharingMessageDao, IBaseSharingMessageRepoTransBlockDao, IBaseSharingNodeDao, IBaseSharingNodeRepoTransBlockDao, IBaseSharingNodeRepoTransBlockStageDao, IBaseSharingNodeRepositoryDao, IBaseSharingNodeTerminalDao, IBaseSynchronizationConflictDao, IBaseSynchronizationConflictPendingNotificationDao, IBaseSynchronizationConflictValuesDao } from './baseDaos';
export interface LocalQSchema extends AirportQSchema {
    db: DbSchema;
    dmo: {
        MissingRecord: IBaseMissingRecordDmo;
        MissingRecordRepoTransBlock: IBaseMissingRecordRepoTransBlockDmo;
        RecordUpdateStage: IBaseRecordUpdateStageDmo;
        RepoTransBlockResponseStage: IBaseRepoTransBlockResponseStageDmo;
        RepoTransBlockSchemaToChange: IBaseRepoTransBlockSchemaToChangeDmo;
        RepositoryTransactionBlock: IBaseRepositoryTransactionBlockDmo;
        RepositoryTransactionHistoryUpdateStage: IBaseRepositoryTransactionHistoryUpdateStageDmo;
        SharingMessage: IBaseSharingMessageDmo;
        SharingMessageRepoTransBlock: IBaseSharingMessageRepoTransBlockDmo;
        SharingNode: IBaseSharingNodeDmo;
        SharingNodeRepoTransBlock: IBaseSharingNodeRepoTransBlockDmo;
        SharingNodeRepoTransBlockStage: IBaseSharingNodeRepoTransBlockStageDmo;
        SharingNodeRepository: IBaseSharingNodeRepositoryDmo;
        SharingNodeTerminal: IBaseSharingNodeTerminalDmo;
        SynchronizationConflict: IBaseSynchronizationConflictDmo;
        SynchronizationConflictPendingNotification: IBaseSynchronizationConflictPendingNotificationDmo;
        SynchronizationConflictValues: IBaseSynchronizationConflictValuesDmo;
    };
    dao: {
        MissingRecord: IBaseMissingRecordDao;
        MissingRecordRepoTransBlock: IBaseMissingRecordRepoTransBlockDao;
        RecordUpdateStage: IBaseRecordUpdateStageDao;
        RepoTransBlockResponseStage: IBaseRepoTransBlockResponseStageDao;
        RepoTransBlockSchemaToChange: IBaseRepoTransBlockSchemaToChangeDao;
        RepositoryTransactionBlock: IBaseRepositoryTransactionBlockDao;
        RepositoryTransactionHistoryUpdateStage: IBaseRepositoryTransactionHistoryUpdateStageDao;
        SharingMessage: IBaseSharingMessageDao;
        SharingMessageRepoTransBlock: IBaseSharingMessageRepoTransBlockDao;
        SharingNode: IBaseSharingNodeDao;
        SharingNodeRepoTransBlock: IBaseSharingNodeRepoTransBlockDao;
        SharingNodeRepoTransBlockStage: IBaseSharingNodeRepoTransBlockStageDao;
        SharingNodeRepository: IBaseSharingNodeRepositoryDao;
        SharingNodeTerminal: IBaseSharingNodeTerminalDao;
        SynchronizationConflict: IBaseSynchronizationConflictDao;
        SynchronizationConflictPendingNotification: IBaseSynchronizationConflictPendingNotificationDao;
        SynchronizationConflictValues: IBaseSynchronizationConflictValuesDao;
    };
    MissingRecord: QMissingRecord;
    MissingRecordRepoTransBlock: QMissingRecordRepoTransBlock;
    RecordUpdateStage: QRecordUpdateStage;
    RepoTransBlockResponseStage: QRepoTransBlockResponseStage;
    RepoTransBlockSchemaToChange: QRepoTransBlockSchemaToChange;
    RepositoryTransactionBlock: QRepositoryTransactionBlock;
    RepositoryTransactionHistoryUpdateStage: QRepositoryTransactionHistoryUpdateStage;
    SharingMessage: QSharingMessage;
    SharingMessageRepoTransBlock: QSharingMessageRepoTransBlock;
    SharingNode: QSharingNode;
    SharingNodeRepoTransBlock: QSharingNodeRepoTransBlock;
    SharingNodeRepoTransBlockStage: QSharingNodeRepoTransBlockStage;
    SharingNodeRepository: QSharingNodeRepository;
    SharingNodeTerminal: QSharingNodeTerminal;
    SynchronizationConflict: QSynchronizationConflict;
    SynchronizationConflictPendingNotification: QSynchronizationConflictPendingNotification;
    SynchronizationConflictValues: QSynchronizationConflictValues;
}
export declare const Q_SCHEMA: LocalQSchema;
export declare const Q: LocalQSchema;
