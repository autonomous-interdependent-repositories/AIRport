import { QSchema as AirportQSchema } from '@airport/air-control';
import { DbSchema } from '@airport/ground-control';
import { QMissingRecord } from './missingrecord/qmissingrecord';
import { QMissingRecordRepoTransBlock } from './missingrecord/qmissingrecordrepotransblock';
import { QRecordUpdateStage } from './qrecordupdatestage';
import { QRepoTransBlockResponseStage } from './repositorytransactionblock/qrepotransblockresponsestage';
import { QRepoTransBlockSchemaToChange } from './repositorytransactionblock/qrepotransblockschematochange';
import { QRepositoryTransactionBlock } from './repositorytransactionblock/qrepositorytransactionblock';
import { QRepositoryTransactionHistoryUpdateStage } from './repositorytransactionblock/qrepositorytransactionhistoryupdatestage';
import { QSharingMessage } from './sharingmessage/qsharingmessage';
import { QSharingMessageRepoTransBlock } from './sharingmessage/qsharingmessagerepotransblock';
import { QSharingNode } from './sharingnode/qsharingnode';
import { QSharingNodeRepoTransBlock } from './sharingnode/qsharingnoderepotransblock';
import { QSharingNodeRepoTransBlockStage } from './sharingnode/qsharingnoderepotransblockstage';
import { QSharingNodeRepository } from './sharingnode/qsharingnoderepository';
import { QSharingNodeTerminal } from './sharingnode/qsharingnodeterminal';
import { QSynchronizationConflict } from './conflict/qsynchronizationconflict';
import { QSynchronizationConflictPendingNotification } from './conflict/qsynchronizationconflictpendingnotification';
import { QSynchronizationConflictValues } from './conflict/qsynchronizationconflictvalues';
import { IBaseMissingRecordDuo, IBaseMissingRecordRepoTransBlockDuo, IBaseRecordUpdateStageDuo, IBaseRepoTransBlockResponseStageDuo, IBaseRepoTransBlockSchemaToChangeDuo, IBaseRepositoryTransactionBlockDuo, IBaseRepositoryTransactionHistoryUpdateStageDuo, IBaseSharingMessageDuo, IBaseSharingMessageRepoTransBlockDuo, IBaseSharingNodeDuo, IBaseSharingNodeRepoTransBlockDuo, IBaseSharingNodeRepoTransBlockStageDuo, IBaseSharingNodeRepositoryDuo, IBaseSharingNodeTerminalDuo, IBaseSynchronizationConflictDuo, IBaseSynchronizationConflictPendingNotificationDuo, IBaseSynchronizationConflictValuesDuo } from './baseDuos';
import { IBaseMissingRecordDao, IBaseMissingRecordRepoTransBlockDao, IBaseRecordUpdateStageDao, IBaseRepoTransBlockResponseStageDao, IBaseRepoTransBlockSchemaToChangeDao, IBaseRepositoryTransactionBlockDao, IBaseRepositoryTransactionHistoryUpdateStageDao, IBaseSharingMessageDao, IBaseSharingMessageRepoTransBlockDao, IBaseSharingNodeDao, IBaseSharingNodeRepoTransBlockDao, IBaseSharingNodeRepoTransBlockStageDao, IBaseSharingNodeRepositoryDao, IBaseSharingNodeTerminalDao, IBaseSynchronizationConflictDao, IBaseSynchronizationConflictPendingNotificationDao, IBaseSynchronizationConflictValuesDao } from './baseDaos';
export interface LocalQSchema extends AirportQSchema {
    db: DbSchema;
    duo: {
        MissingRecord: IBaseMissingRecordDuo;
        MissingRecordRepoTransBlock: IBaseMissingRecordRepoTransBlockDuo;
        RecordUpdateStage: IBaseRecordUpdateStageDuo;
        RepoTransBlockResponseStage: IBaseRepoTransBlockResponseStageDuo;
        RepoTransBlockSchemaToChange: IBaseRepoTransBlockSchemaToChangeDuo;
        RepositoryTransactionBlock: IBaseRepositoryTransactionBlockDuo;
        RepositoryTransactionHistoryUpdateStage: IBaseRepositoryTransactionHistoryUpdateStageDuo;
        SharingMessage: IBaseSharingMessageDuo;
        SharingMessageRepoTransBlock: IBaseSharingMessageRepoTransBlockDuo;
        SharingNode: IBaseSharingNodeDuo;
        SharingNodeRepoTransBlock: IBaseSharingNodeRepoTransBlockDuo;
        SharingNodeRepoTransBlockStage: IBaseSharingNodeRepoTransBlockStageDuo;
        SharingNodeRepository: IBaseSharingNodeRepositoryDuo;
        SharingNodeTerminal: IBaseSharingNodeTerminalDuo;
        SynchronizationConflict: IBaseSynchronizationConflictDuo;
        SynchronizationConflictPendingNotification: IBaseSynchronizationConflictPendingNotificationDuo;
        SynchronizationConflictValues: IBaseSynchronizationConflictValuesDuo;
    };
    dao: {
        MissingRecord: IBaseMissingRecordDao;
        MissingRecordRepoTransBlock: IBaseMissingRecordRepoTransBlockDao;
        RecordUpdateStage: IBaseRecordUpdateStageDao;
        RepoTransBlockResponseStage: IBaseRepoTransBlockResponseStageDao;
        RepoTransBlockSchemaToChange: IBaseRepoTransBlockSchemaToChangeDao;
        RepositoryTransactionBlock: IBaseRepositoryTransactionBlockDao;
        RepositoryTransactionHistoryUpdateStage: IBaseRepositoryTransactionHistoryUpdateStageDao;
        SharingMessage: IBaseSharingMessageDao;
        SharingMessageRepoTransBlock: IBaseSharingMessageRepoTransBlockDao;
        SharingNode: IBaseSharingNodeDao;
        SharingNodeRepoTransBlock: IBaseSharingNodeRepoTransBlockDao;
        SharingNodeRepoTransBlockStage: IBaseSharingNodeRepoTransBlockStageDao;
        SharingNodeRepository: IBaseSharingNodeRepositoryDao;
        SharingNodeTerminal: IBaseSharingNodeTerminalDao;
        SynchronizationConflict: IBaseSynchronizationConflictDao;
        SynchronizationConflictPendingNotification: IBaseSynchronizationConflictPendingNotificationDao;
        SynchronizationConflictValues: IBaseSynchronizationConflictValuesDao;
    };
    MissingRecord: QMissingRecord;
    MissingRecordRepoTransBlock: QMissingRecordRepoTransBlock;
    RecordUpdateStage: QRecordUpdateStage;
    RepoTransBlockResponseStage: QRepoTransBlockResponseStage;
    RepoTransBlockSchemaToChange: QRepoTransBlockSchemaToChange;
    RepositoryTransactionBlock: QRepositoryTransactionBlock;
    RepositoryTransactionHistoryUpdateStage: QRepositoryTransactionHistoryUpdateStage;
    SharingMessage: QSharingMessage;
    SharingMessageRepoTransBlock: QSharingMessageRepoTransBlock;
    SharingNode: QSharingNode;
    SharingNodeRepoTransBlock: QSharingNodeRepoTransBlock;
    SharingNodeRepoTransBlockStage: QSharingNodeRepoTransBlockStage;
    SharingNodeRepository: QSharingNodeRepository;
    SharingNodeTerminal: QSharingNodeTerminal;
    SynchronizationConflict: QSynchronizationConflict;
    SynchronizationConflictPendingNotification: QSynchronizationConflictPendingNotification;
    SynchronizationConflictValues: QSynchronizationConflictValues;
}
export declare const Q_SCHEMA: LocalQSchema;
export declare const Q: LocalQSchema;
