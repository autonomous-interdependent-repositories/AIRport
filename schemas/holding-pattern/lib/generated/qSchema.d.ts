import { QSchema as AirportQSchema } from '@airport/air-control';
import { DbSchema, EntityId } from '@airport/ground-control';
import { QActor } from './infrastructure/qactor';
import { QActorApplication } from './infrastructure/qactorapplication';
import { QApplication } from './infrastructure/qapplication';
import { QChildRepoRow } from './traditional/qchildreporow';
import { QChildRow } from './traditional/qchildrow';
import { QImmutableRepoRow } from './traditional/qimmutablereporow';
import { QImmutableRow } from './traditional/qimmutablerow';
import { QMutableRepoRow } from './traditional/qmutablereporow';
import { QMutableRow } from './traditional/qmutablerow';
import { QOperationHistory } from './history/qoperationhistory';
import { QRecordHistory } from './history/qrecordhistory';
import { QRecordHistoryNewValue } from './history/qrecordhistorynewvalue';
import { QRecordHistoryOldValue } from './history/qrecordhistoryoldvalue';
import { QReferenceRow } from './traditional/qreferencerow';
import { QRepoTransHistoryChangedRepositoryActor } from './history/qrepotranshistorychangedrepositoryactor';
import { QRepository } from './repository/qrepository';
import { QRepositoryActor } from './repository/qrepositoryactor';
import { QRepositoryApplication } from './repository/qrepositoryapplication';
import { QRepositoryEntity } from './repository/qrepositoryentity';
import { QRepositorySchema } from './repository/qrepositoryschema';
import { QRepositoryTransactionHistory } from './history/qrepositorytransactionhistory';
import { QStageable } from './infrastructure/qstageable';
import { QTransactionHistory } from './history/qtransactionhistory';
export interface LocalQSchema extends AirportQSchema {
    db: DbSchema;
    Actor: QActor;
    ActorApplication: QActorApplication;
    Application: QApplication;
    ChildRepoRow: QChildRepoRow;
    ChildRow: QChildRow;
    ImmutableRepoRow: QImmutableRepoRow;
    ImmutableRow: QImmutableRow;
    MutableRepoRow: QMutableRepoRow;
    MutableRow: QMutableRow;
    OperationHistory: QOperationHistory;
    RecordHistory: QRecordHistory;
    RecordHistoryNewValue: QRecordHistoryNewValue;
    RecordHistoryOldValue: QRecordHistoryOldValue;
    ReferenceRow: QReferenceRow;
    RepoTransHistoryChangedRepositoryActor: QRepoTransHistoryChangedRepositoryActor;
    Repository: QRepository;
    RepositoryActor: QRepositoryActor;
    RepositoryApplication: QRepositoryApplication;
    RepositoryEntity: QRepositoryEntity;
    RepositorySchema: QRepositorySchema;
    RepositoryTransactionHistory: QRepositoryTransactionHistory;
    Stageable: QStageable;
    TransactionHistory: QTransactionHistory;
}
export declare const Q_SCHEMA: LocalQSchema;
export declare const Q: LocalQSchema;
export declare function diSet(dbEntityId: EntityId): boolean;
export declare function duoDiSet(dbEntityId: EntityId): boolean;
//# sourceMappingURL=qSchema.d.ts.map